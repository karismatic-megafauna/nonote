{"version":3,"sources":["../src/utils.js"],"names":["printIncompleteItems","removeNote","completeNote","incompleteNote","failNote","createDir","getRootDir","getDateDir","initializeNotes","changeStatus","makeNote","removeSection","createSection","addNote","itemsArry","forEach","item","i","number","bold","description","hex","console","log","arry","index","splice","path","templateDest","templateFile","mkdirsSync","closeSync","openSync","writeJsonSync","green","config","process","env","HOME","readJsonSync","notesDirectory","today","format","notesDir","days","toDir","userDir","lastChar","substr","length","slice","doubleIndex","indexOf","rcFile","dotFileJSON","cyan","key","cb","configPath","readJson","err","configJSON","error","toData","dataJSON","cliFound","note","noteIndex","items","Error","writeJson","exit","emptyFunc","notesData","dir","toMd","noteMd","createWriteStream","section","cliRef","write","title","status","checkBox","itemIndex","on","end","dataPath","filteredDataJSON","filter","keepSection","name","push","noteObj","noteString","reduce","memo","word","descriptionObj"],"mappings":"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","file":"utils.js","sourcesContent":["import fs from 'fs-extra';\nimport moment from 'moment';\nimport chalk from 'chalk';\nimport templateJSON from '../templates/default.json';\n\nexport function printIncompleteItems(itemsArry) {\n  itemsArry.forEach((item, i) =>  {\n    const number = chalk.bold(`${i}.)`);\n    const description = chalk.hex('#a1a1a1').bold(item.description);\n    console.log(`   ${number} ${description}`);\n  });\n}\n\nexport function removeNote(arry, index) {\n  arry.splice(index, 1);\n}\n\nexport function completeNote(arry, index) {\n  arry[index]['status'] = 'complete';\n}\n\nexport function incompleteNote(arry, index) {\n  arry[index]['status'] = 'incomplete';\n}\n\nexport function failNote(arry, index) {\n  arry[index]['status'] = 'failed';\n}\n\nexport function createDir(path) {\n  var templateDest = path + '/templates/';\n  var templateFile = path + '/templates/default.json';\n  fs.mkdirsSync(path);\n  fs.mkdirsSync(templateDest);\n  fs.closeSync(fs.openSync(templateFile, 'w'));\n  fs.writeJsonSync(templateFile, templateJSON);\n  console.log(chalk.green('Success!'));\n}\n\nexport function getRootDir() {\n  var config = `${process.env.HOME}/.nonoterc.json`;\n  // TODO: handle the case of `nonote new` when `nonote init` has not been run\n  return fs.readJsonSync(config).notesDirectory;\n}\n\nexport function getDateDir() {\n  const today = moment().format(\"DD-MM-YYYY\");\n  const notesDir = getRootDir();\n  const days = `${notesDir}/days/`;\n  const toDir = days + today;\n  return toDir;\n}\n\nexport function initializeNotes(userDir) {\n  var lastChar = userDir.substr(userDir.length - 1);\n  if ( lastChar === \"/\" ) {\n    userDir = userDir.slice(0, -1);\n  }\n\n  var doubleIndex = userDir.indexOf(\"//\");\n  if ( doubleIndex > -1 ) {\n    userDir = userDir.slice(0, doubleIndex) + userDir.slice(doubleIndex + 1);\n  }\n\n  var rcFile = `${process.env.HOME}/.nonoterc.json`;\n  fs.closeSync(fs.openSync(rcFile, 'w'));\n\n  var dotFileJSON = {}\n  dotFileJSON.notesDirectory = userDir;\n\n  fs.writeJsonSync(rcFile, dotFileJSON);\n  console.log(`\\ndotfile \".nonoterc.json\" created at ${process.env.HOME}` );\n  console.log(' ');\n  console.log('Notes will be made in this directory: ')\n  console.log(chalk.cyan(dotFileJSON.notesDirectory));\n  console.log(' ');\n}\n\nexport function changeStatus(index, key, cb) {\n  const today = moment().format(\"DD-MM-YYYY\");\n  var configPath = `${process.env.HOME}/.nonoterc.json`;\n  fs.readJson(configPath, (err, configJSON) => {\n    if (err) console.error(err)\n\n    const notesDir = configJSON.notesDirectory;\n    const days = `${notesDir}/days/`;\n    const toDir = days + today;\n    var toData = `${toDir}/data.json`;\n\n    fs.readJson(toData, (err, dataJSON) => {\n      if (err) console.error(err)\n\n      var cliFound = false;\n      dataJSON.forEach((note, noteIndex) => {\n        if (note['cli-ref'] === key) {\n          cliFound = true;\n          if (!note.items[index]) {\n            throw new Error(`index ${index} in \"${key}\" object does not exist`);\n          }\n          cb(note.items, index);\n          fs.writeJson(toData, dataJSON, (err) => {\n            if (err) return console.error(err)\n\n            makeNote(dataJSON, () => {process.exit();});\n          });\n        } else if (dataJSON.length === (noteIndex + 1) && !cliFound) {\n          throw new Error(`\"${key}\" <cli-ref> does not exist`);\n        }\n      });\n    });\n  });\n}\n\nvar emptyFunc = () => {};\n\nexport function makeNote(notesData, cb = emptyFunc) {\n  var dir = getDateDir();\n  var toMd = `${dir}/note.md`;\n  var noteMd = fs.createWriteStream(toMd);\n\n  notesData.forEach((section) => {\n    var cliRef = section['cli-ref'];\n    noteMd.write(`# ${section.title} --> ${cliRef}\\n`);\n    section.items.forEach((item, index) => {\n      var status = item.status;\n      var checkBox = '- [ ]';\n      var itemIndex = ` ${index}.) `;\n      if (status === 'complete') {\n        checkBox = '- [x]';\n      } else if (status === 'failed') {\n        checkBox = '- [-]';\n      }\n      noteMd.write(checkBox + itemIndex + item.description + \"\\n\");\n    });\n    noteMd.write(\"\\n\");\n  });\n  noteMd.on('finish', cb);\n  noteMd.end();\n}\n\nexport function removeSection(section) {\n  const today = moment().format(\"DD-MM-YYYY\");\n  var configPath = `${process.env.HOME}/.nonoterc.json`;\n  fs.readJson(configPath, (err, configJSON) => {\n    const notesDir = configJSON.notesDirectory;\n    const days = `${notesDir}/days/`;\n    const dir = days + today;\n    var dataPath = `${dir}/data.json`;\n    fs.readJson(dataPath, (err, dataJSON) => {\n\n      const filteredDataJSON = dataJSON.filter((note) => {\n        const keepSection = note['cli-ref'] !== section;\n        if (!keepSection) {\n          console.log(`\"${chalk.cyan(note.title)}\" section was removed!`);\n        }\n        return keepSection;\n      });\n\n      fs.writeJson(dataPath, filteredDataJSON, (err) => {\n        if (err) return console.error(err)\n\n        makeNote(filteredDataJSON);\n      })\n    });\n  });\n}\n\nexport function createSection(name, cliRef, description = 'no description') {\n  const today = moment().format(\"DD-MM-YYYY\");\n  var configPath = `${process.env.HOME}/.nonoterc.json`;\n  fs.readJson(configPath, (err, configJSON) => {\n    const notesDir = configJSON.notesDirectory;\n    const days = `${notesDir}/days/`;\n    const dir = days + today;\n    var dataPath = `${dir}/data.json`;\n    fs.readJson(dataPath, (err, dataJSON) => {\n      dataJSON.push({\n        'title': name,\n        'cli-ref': cliRef,\n        'description': description,\n        'items': [],\n      });\n\n      fs.writeJson(dataPath, dataJSON, (err) => {\n        if (err) return console.error(err)\n\n        makeNote(dataJSON, () => {process.exit();});\n      })\n    });\n  });\n}\n\nexport function addNote(noteObj, key) {\n  const today = moment().format(\"DD-MM-YYYY\");\n  var configPath = `${process.env.HOME}/.nonoterc.json`;\n  fs.readJson(configPath, (err, configJSON) => {\n    if (err) console.error(err)\n\n    const notesDir = configJSON.notesDirectory;\n    const days = `${notesDir}/days/`;\n    const toDir = days + today;\n    const dataPath = `${toDir}/data.json`;\n\n    var noteString = noteObj.reduce(function(memo, word){\n      return memo + ' ' + word;\n    });\n\n    var descriptionObj = {\n      description: noteString,\n      status: 'incomplete',\n    };\n\n    fs.readJson(dataPath, (err, dataJSON) => {\n      dataJSON.forEach((note) => {\n        if (note['cli-ref'] === key) {\n          note.items.push(descriptionObj);\n          fs.writeJson(dataPath, dataJSON, (err) => {\n            if (err) return console.error(err)\n\n            makeNote(dataJSON, () => {process.exit();});\n          });\n        }\n      });\n    });\n  });\n}\n"]}