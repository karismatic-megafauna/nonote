{"version":3,"sources":["../src/main.js"],"names":["Utils","version","command","alias","description","action","template","cmd","today","format","yesterday","subtract","configPath","process","env","HOME","readJson","err","configObj","console","error","notesDir","notesDirectory","days","todayPath","yesterdayPath","yesterdayDataJSONPath","dataJSONPath","noteMdPath","templateDataPath","mkdirs","copy","yesterdayObj","hasPreviousNote","incompleteSections","code","Object","keys","map","section","incompleteItems","items","filter","item","status","noteObj","log","green","length","forEach","incompleteSection","name","yellow","currentSection","i","number","bold","hex","undefined","writeJson","makeNote","watchCmd","cyan","configJSON","toDir","noteMd","access","constants","F_OK","badNotePath","newNoteCmd","readFile","data","toString","watch","sectionName","cliRefName","createSection","notesDirPath","homePath","initializeNotes","createDir","exit","ref","note","addNote","e","red","option","options","removeSection","changeStatus","removeNote","completeNote","incompleteNote","failNote","parse","argv"],"mappings":"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","file":"main.js","sourcesContent":["\n\nimport { install } from 'source-map-support';\ninstall();\n\nimport 'babel-polyfill';\n// Libs\nimport chalk from 'chalk';\nimport program from 'commander';\nimport fs from 'fs-extra';\nimport moment from 'moment';\nimport co from 'co';\nimport prompt from 'co-prompt';\nimport * as Utils from './utils';\n\nprogram\n  .version('0.0.1')\n  .command('new [template]')\n  .alias('n')\n  .description('create a new note for the day')\n  .action(function(template, cmd) {\n    if(!template) {\n      template = 'default';\n    }\n    const today = moment().format(\"DD-MM-YYYY\");\n    const yesterday = moment().subtract(1, 'day').format(\"DD-MM-YYYY\");\n    var configPath = `${process.env.HOME}/.nonoterc.json`;\n\n    fs.readJson(configPath, (err, configObj) => {\n      if (err) console.error(err)\n\n      const notesDir = configObj.notesDirectory;\n      const days = `${notesDir}/days/`;\n      const todayPath = days + today;\n      const yesterdayPath = days + yesterday;\n      const yesterdayDataJSONPath= `${yesterdayPath}/data.json`;\n      const dataJSONPath = `${todayPath}/data.json`;\n      const noteMdPath = `${todayPath}/note.md`;\n\n      const templateDataPath = `${notesDir}/templates/${template}.json`;\n\n      fs.mkdirs(todayPath, (err) => {\n        if (err) console.error(err)\n\n        fs.copy(templateDataPath, dataJSONPath, (err) => {\n          if (err) console.error(err)\n\n          fs.readJson(yesterdayDataJSONPath, (err, yesterdayObj) => {\n            let hasPreviousNote = true;\n            let incompleteSections = [];\n\n            if (err && err.code === 'ENOENT') {\n              hasPreviousNote = false;\n            }\n\n            if (hasPreviousNote) {\n              incompleteSections = Object.keys(yesterdayObj).map(section => {\n                const incompleteItems = yesterdayObj[section].items.filter(item => {\n                  return item.status !== \"complete\"\n                });\n\n                return {\n                  [section]: {\n                    items: incompleteItems,\n                    description: yesterdayObj[section].description,\n                    ['cli-ref']: yesterdayObj[section]['cli-ref'],\n                  }\n                }\n              });\n            }\n\n            fs.readJson(dataJSONPath, (err, noteObj) => {\n              console.log(`Creating new note from the ${chalk.green(template)} template...`);\n              if (hasPreviousNote && incompleteSections.length > 0) {\n                incompleteSections.forEach((incompleteSection) => {\n                  Object.keys(incompleteSection).map((name) =>{\n                    console.log(`\\nCopying ${chalk.yellow(name)} incomplete tasks from yesterday:`);\n                    const currentSection = incompleteSection[name];\n                    currentSection.items.forEach((item, i) =>  {\n                      const number = chalk.bold(`${i}.)`);\n                      const description = chalk.hex('#a1a1a1').bold(item.description);\n                      console.log(`   ${number} ${description}`);\n                    });\n\n                    if( noteObj[name] === undefined) {\n                      noteObj[name] = {\n                        items: currentSection.items,\n                        description: currentSection.description,\n                        ['cli-ref']: currentSection['cli-ref'],\n                      };\n                    } else {\n                      noteObj[name] = {\n                        items: [ ...noteObj[name].items, ...currentSection.items ],\n                        description: currentSection.description,\n                        ['cli-ref']: currentSection['cli-ref'],\n                      };\n                    }\n                  });\n                });\n              }\n\n              fs.writeJson(dataJSONPath, noteObj, (err) => {\n                if (err) return console.error(err)\n\n                Utils.makeNote(noteObj);\n                const watchCmd = 'nono watch';\n                console.log(`\\nGreat success! Here is your note for today: \\n${chalk.cyan(noteMdPath)}`);\n                console.log(`\\nYou can see the note by running ${chalk.green(watchCmd)} anywhere in your console!`);\n              });\n            })\n          });\n        });\n      });\n    });\n  });\n\n\nprogram\n  .command('watch')\n  .alias('w')\n  .description('watches todays note')\n  .action(function(){\n    co(function *() {\n      const today = moment().format(\"DD-MM-YYYY\");\n      var configPath = `${process.env.HOME}/.nonoterc.json`;\n      fs.readJson(configPath, (err, configJSON) => {\n        if (err) console.error(err)\n\n        const notesDir = configJSON.notesDirectory;\n        const days = `${notesDir}/days/`;\n        const toDir = days + today;\n        const noteMd = `${toDir}/note.md`;\n\n        fs.access(noteMd, fs.constants.F_OK, (err) => {\n          if (err && err.code === 'ENOENT') {\n            const badNotePath = chalk.cyan(noteMd);\n            const newNoteCmd = chalk.green('nono new');\n            console.log(`\nOh man, oh jeez, ok, I-I-I can't access this note:\n${badNotePath}\n\nC-c-can you try m-m-making a new note or s-s-something?\n${newNoteCmd}\n            `);\n            return;\n          }\n\n          fs.readFile(noteMd, (err, data) => {\n            if (err) throw err;\n            console.log('\\x1Bc');\n            console.log(data.toString());\n          });\n\n          fs.watch(noteMd, () => {\n            fs.readFile(noteMd, (err, data) => {\n              if (err) throw err;\n              console.log('\\x1Bc');\n              console.log(data.toString());\n            });\n          });\n        });\n      });\n    });\n  });\n\n\nprogram\n  .command('section')\n  .alias('s')\n  .description('create new section')\n  .action(function() {\n    co(function *() {\n      const sectionName = yield prompt('New section name: ');\n      const cliRefName = yield prompt('Cli reference key: ');\n      const description = yield prompt('Short description: ');\n\n      Utils.createSection(sectionName, cliRefName, description);\n\n      console.log(chalk.green(`new section '${sectionName}' was created!`));\n    });\n  });\n\nprogram\n  .command('init')\n  .description('initializes notes')\n  .action(function() {\n    co(function *() {\n      const notesDirPath = yield prompt('notes directory path (from $HOME): ');\n      const homePath = `${process.env.HOME}/${notesDirPath}`;\n      Utils.initializeNotes(homePath);\n\n      Utils.createDir(homePath);\n      console.log('Start taking notes with', chalk.green('nonote new!'));\n      // TODO: create a readme\n      process.exit();\n    })\n  });\n\nprogram\n  .command('add <cli-ref> [notes...]')\n  .alias('a')\n  .description('add note to object')\n  .action(function(ref, note) {\n    try {\n      Utils.addNote(note, ref);\n      console.log(chalk.green('note added!'));\n    } catch (e) {\n      console.log(chalk.red(e));\n    }\n  });\n\nprogram\n  .command('remove <cli-ref> [index]')\n  .alias('r')\n  .option('-s, --section', 'remove a seciton')\n  .description('remove note from note object')\n  .action(function(ref, note, options) {\n    if (options.section && note === undefined) {\n      Utils.removeSection(ref);\n    } else {\n      try {\n        Utils.changeStatus(note, ref, Utils.removeNote);\n        console.log(chalk.green(`note at index[${note}] was removed!`));\n      } catch (e) {\n        console.log(chalk.red(e));\n      }\n    }\n  });\n\nprogram\n  .command('complete <cli-ref> [index]')\n  .alias('c')\n  .description('mark item as complete')\n  .action(function(ref, note) {\n    try {\n      Utils.changeStatus(note, ref, Utils.completeNote);\n      console.log(chalk.green(`note at index[${note}] was marked as complete!`));\n    } catch (e) {\n      console.log(chalk.red(e));\n    }\n  });\n\nprogram\n  .command('incomplete <cli-ref> [index]')\n  .alias('i')\n  .description('mark item as incomplete')\n  .action(function(ref, note) {\n    try {\n      Utils.changeStatus(note, ref, Utils.incompleteNote);\n      console.log(chalk.green(`note at index[${note}] was marked as incomplete!`));\n    } catch (e) {\n      console.log(chalk.red(e));\n    }\n  });\n\n\nprogram\n  .command('failed [cli-ref] <index>')\n  .alias('f')\n  .description('mark item as failed')\n  .action(function(ref, note) {\n    try {\n      Utils.changeStatus(note, ref, Utils.failNote);\n      console.log(chalk.green(`note at index[${note}] was marked as failed :(`));\n    } catch (e) {\n      console.log(chalk.red(e));\n    }\n  });\n\n  program.parse(process.argv);\n\n"]}